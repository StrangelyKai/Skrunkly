OnFirstBoot
{
	stroke = 0
	LastTalk = ""
	nsfw = 0
	trgesture = "NONE"
	ltalkrate = "NONE"
	accessmode = 0
	needlepokes = 0
	patpatv = 0
	holdhandv = 0
	boopv = 0
}

OnInitialize
{
	if !ISVAR("needlepokes"); needlepokes = 0
	if !ISVAR("patpatv"); patpatv = 0
	if !ISVAR("holdhandv"); holdhandv = 0
	if !ISVAR("boopv"); boopv = 0
	if !ISVAR("resetkonami"); resetkonami = 0
	konami = IARRAY
}

OnClose
{
	"\w8\w8\-"
}

OnSurfaceRestore
{
	"\1\s[10]\0\s[0]"
}

OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif reference0 == "t"; OnAiTalk
	elseif reference0 == "r"; OnLastTalk
	elseif SHIORI3FW.DebugMode && reference0 == "g"; "\![change,ghost,Skrunkly]"
	//38,38,40,40,37,39,37,39,66,65,13
	elseif reference1 == 38 || reference1 == 40 || reference1 == 37 || reference1 == 39 || reference1 == 66 || reference1 == 65 || reference1 == 13
	{
		_last = reference1
		if !ISVAR("konami"); konami = IARRAY
		if _last == "13"
		{
			konami ,= reference1
			_konami = TOSTR(konami)
			konami = IARRAY
			
			if _konami == "38,38,40,40,37,39,37,39,66,65,13"
			{
				OnStatsPage
			}
		}
		else; konami ,= reference1
	}
}

OnStatsPage : all
{	
	"\_q%(b_square)"
	"Poked by Needle: %(needlepokes)\n"
	"Petted on head: %(patpatv)\n"
	"Held Hands: %(holdhandv)\n"
	"Booped on nose: %(boopv)\n"
	"Cookies clicked: %(clickcookie)"
}

OnSecondChange
{
	if passsec == 60
	{
		passsec = 0
		--
		if konami != IARRAY
		{
			konami = IARRAY
		}
	}
	else; passsec++
}

//needed for envelopes
OnTranslate
{
	_talk = reference0
	
	if SHIORI3FW.BalloonName != "Spirit Detective"
    {
        for _i = 2; _i <= 103; _i += 2
		{
			_talk = REPLACE(_talk,"\b[%(_i)]","\b[0]")
		}
    }
	
	//This is the bit that runs envelopes in script input
	if reference1 == "" && reference2 == "" //If this is from script input
	{
		
		EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	else
	{
		TOSTR(_talk)
	}
}

OnTechnoTribute
{
	"\j[https://www.curesarcoma.org/technoblade-tribute/]\e"
}

OnClickCookie
{
	if !ISVAR("clickcookie"); clickcookie = 0
	--
	clickcookie++
	--
	"cookies clicked: %(clickcookie)"
}

On_homeurl
{
	"https://raw.githubusercontent.com/StrangelyKai/Skrunkly/main/skrunkly/"
}

//—————————————————————————————— Network Update ——————————————————————————————
//Starting an update
OnUpdateBegin
{
	"\0\s[0]Checking for updates.\w8"
}

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	
	//plural checks, adds an s and changes is to are if there's more than 1 file
	_s = ""; _are = "is"; if reference0 != 1; _s = "s"; _are = "are"
	
	"\0\s[0]There %(_are) %(reference0) new file%(_s).\w8"
}

//When the update finishes. Don't forget to initialize any new variables you've created! I highly highly recommend using OnInitialize for this (it's in boot.dic), in case the user updates via the ghost explorer or some other means.
//reference0 is 'none' if there were no new files to update with, reference1 is a list of new file names, separated by commas
OnUpdateComplete
{
	if reference0 == "none"
	{
		"\0\s[0]There are no new files."
	}
	else
	{
		"\0\s[0]Update complete."
	}
}

//reference0 is the reason the update failed
OnUpdateFailure //If the update fails
{
	if reference0 == "timeout" //If it timed out
	{
		"\0\s[0]Connection timed out."
	}
	elseif reference0 == "md5 miss" //If the update files have not been uploaded correctly and don't match the updates2.dau
	{
		_file = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //This gets the name and extension of the offending file
		
		"\0\s[0]The MD5 values don't match.\w8 Contact the ghost author and let them know that '%(_file)' is giving an MD5 error."
	}
	elseif reference0 == "artificial" //If the user cancels the update by double clicking the balloon
	{
		"\0\s[0]Update cancelled."
	}
	else //Any other errors
	{
		"\0\s[0]Error while updating:\w4 ""%(reference0)""."
	}
}


//—————————————————————————————— Right click menu links ——————————————————————————————

//Takes an array of alternating names and urls, and formats them for use with the right click menu
FormatLinks : all
{
	for _i = 0; _i < ARRAYSIZE(_argv); _i++
	{
		_argv[_i] //Add the link/title
		//Alternate between adding %ASC(1) or %ASC(2)
		if _i % 2 == 1; "%ASC(2)"
		else; "%ASC(1)"
	}
}

On_sakura.recommendsites
{
	FormatLinks(recommendsites_sakura)
}

On_recommendrootbutton.caption
 {
	"Dev Links"
}

On_portalrootbutton.caption
 {
	"Other"
 }

On_dressuprootbutton.caption
{
	"Dress-Ups"
}

//These are the websites linked in the top option of the sakura's right click menu. The format is simple; write the label of the link on the left followed by a semicolon, and then on the right, the url to link to. These should be separate strings.
recommendsites_sakura : array
{
	"Github";	"https://github.com/StrangelyKai/Ukagaka"
	"Dev Wiki Page"; "https://ukagakadreamteam.com/wiki/dev/strangelykai"
	"Skrunkly Wiki Page"; "https://ukagakadreamteam.com/wiki/ghost/skrunkly"
	"Skrunkly's Playlist"; "https://open.spotify.com/playlist/1jR2WRzLcPnItpMEo1NgKH?si=47d3106987314e0f"
}

//—————————————————————————————— Creating a .nar file ——————————————————————————————
OnNarCreated
{
	_nar = "\_a[OnNarLocation,""%(reference1)""]%(reference0)\_a" //Makes a clickable link that'll open the location of the file they just made
	
	"\0\s[0]Successfully created %(_nar)."
}

OnNarLocation
{	
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	
	"\![open,file,""%(_path)""]"
}


//Written by Zichqec https://ukagaka.zichqec.com/

//To call the function, you can either call the function in your code like this:
//Wobble("Your dialogue here!")
//Or in dialogue like this:
//"%(Wobble('Your dialogue here!'))"

//You can also overwrite the default values by sending extra arguments after the dialogue. Argument 0 will always be the dialogue you want to run through the wobble function. Argument 1 is for random upper/lowercase (1 is on and 0 is off), arguments 2 and 3 are X and Y jitter respectively, argument 4 is the amount the font size can vary by per-letter, and argument 5 is if the font size can change up, down, or both (0 is both, 1 is up, and 2 is down).

//You may exclude any of these arguments, but you must include a blank argument where they would be.
//Example: Wobble("Spooooky","","10","30","2","1")
//This will skip the upper/lowercase argument.
//Arguments that are farthest to the right can be ignored entirely if you don't want them.
//Example: Wobble("Spooooky","1")
//This will add random upper/lowercase characters, but use default values for everything else. But if you want to add arguments for changing the font size and nothing else you'd have to write it like this:
//Example: Wobble("Spooooky","","","","2","1")

//If you want to write an apostrophe in dialogue, write ## and it'll be replaced with an apostrophe

Wobble
{
	_argv[0] = REPLACE(_argv[0],"##","'") //replaces ## with an apostrophe, you can change this if you want to use something else

	//Default values - Set these to whatever you'd like, you can override them for each individual dialogue if you like
	_UPlow = 0		//Controls if letters are randomly converted to upper/lowercase. 0 for off, 1 for on.
	_Xjitter = 5	//Controls how much space can be between each letter. Higher numbers will be more spaced out.
	_Yjitter = 5	//Controls how much letters can vary up and down. Higher numbers will be more spaced out.
	_SizeJitter = 0 //Controls how much the font size can change per letter. Higher numbers will have more extreme variance.
	_SizeUpDown = 1 //Controls if the font size can go up, down, or both. 0 for both, 1 for up, 2 for down.
	
	if _argv[1] != ""; _UPlow = _argv[1] //These check if the user has sent special arguments, and if not, uses the default values
	if _argv[2] != ""; _Xjitter = _argv[2]
	if _argv[3] != ""; _Yjitter = _argv[3]
	if _argv[4] != ""; _SizeJitter = _argv[4]
	if _argv[5] != ""; _SizeUpDown = _argv[5]
	
	_word = "" //Initialize display
	for _i = 0; _i < STRLEN(_argv[0]); _i++
	{
		_let = SUBSTR(_argv[0],_i,1) //Get the current letter
		if TOINT(_UPlow) == 1 //If random upper/lower is on, flip a coin to determine which this letter will be
		{
			if RAND(2) == 1; _let = TOUPPER(_let); else; _let = TOLOWER(_let)
		}
		_X = RAND(_Xjitter) //Get random values for X, Y, and Size
		_Y = RAND(_Yjitter)
		_Sz = RAND(_SizeJitter)
		if _SizeUpDown == 1 //Size only goes up
		{
			_Sz = "+" + _Sz
		}
		elseif _SizeUpDown == 2 //Size only goes down
		{
			_Sz = "-" + _Sz
		}
		else //Flip a coin on if the size should go up or down
		{
			if RAND(2) == 1; _Sz = "+" + _Sz; else; _Sz = "-" + _Sz 
		}
		_word += "\_l[@%(_X),%(_Y)]\f[height,%(_Sz)]" + _let //Add to the display
	}
	_word
}

//Written by Zichqec https://zichqec.github.io/s-the-skeleton/
//This code automates adding simple information to SSP's AI graph, for if you want a simple count of things like your number of randomtalks, the number of entries in an envelope, etc.
//The AI graph can do a lot more besides just this! Read up about it on Ukadoc here: https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_resource.html#getaistateex
//Note: if things are set up wrong, opening the AI graph may cause SSP to crash. Just be a little cautious and make sure you follow the instructions.
On_getaistateex : all
{
    _graph = AI_Graphs[reference0]
    if _graph != ""
    {
        _items = SPLIT(_graph,",")
        for _i = 0; _i < ARRAYSIZE(_items); _i++
        {
            if _i > 0; ","
            OUTPUTNUM("%(_items[_i])")
        }
        C_BYTE1
        for _i = 0; _i < ARRAYSIZE(_items); _i++
        {
            if _i > 0; ","
            "%(_items[_i])"
        }
    }
}

//Each entry in this array is a new page that will be added to the AI Graph.
//You can add as many entries as you want, and each one will be a new page.
//You can add as many items to the entries as you want, just have at least 3 or SSP will crash when trying to load the graph.
//Obviously, if you add too many, it will at some point become very overwhelming to look at. You might try adding some sort of variables to control when each option is output.
//Make sure you write the NAMES of the functions/envelopes you want it to count, NOT a function call like %(name)
AI_Graphs : array
{
    "RandomTalk,OnPatPat,OnHoldHands,OnBoop"
}